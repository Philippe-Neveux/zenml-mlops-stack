{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ZenML MLOps Stack on Google Cloud","text":"<p>A complete production-ready MLOps infrastructure deployment using Terraform, ArgoCD, and Kubernetes on Google Cloud Platform. This repository provides automated infrastructure provisioning and GitOps-based application deployment for a comprehensive ZenML stack.</p>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<p>This stack deploys a complete MLOps environment with the following components:</p>"},{"location":"#infrastructure-components","title":"Infrastructure Components","text":"<ul> <li>GKE Autopilot Cluster: Managed Kubernetes with automatic scaling and security</li> <li>VPC Networking: Custom network with proper subnet configuration for security</li> <li>Cloud SQL MySQL: Managed database for ZenML metadata storage with private networking</li> <li>Google Cloud Storage: Artifact storage for ML models and datasets</li> <li>Artifact Registry: Container image registry for custom Docker images</li> <li>Security: IAM roles, service accounts, KMS encryption, and network security rules</li> </ul>"},{"location":"#application-stack-gitops-with-argocd","title":"Application Stack (GitOps with ArgoCD)","text":"<ul> <li>ArgoCD: GitOps continuous deployment for Kubernetes applications</li> <li>NGINX Ingress Controller: Production-ready ingress with LoadBalancer and HTTPS</li> <li>cert-manager: Automatic Let's Encrypt TLS certificate management</li> <li>External Secrets Operator: Secure secret management from Google Secret Manager</li> <li>ZenML Server: ML pipeline orchestration and model registry</li> <li>MLflow Server: ML experiment tracking and model serving</li> </ul>"},{"location":"#security-networking","title":"Security &amp; Networking","text":"<ul> <li>Automatic HTTPS: Let's Encrypt certificates via cert-manager</li> <li>Private GKE nodes: Nodes without public IPs for enhanced security</li> <li>Private database: Cloud SQL accessible only from VPC</li> <li>Secret management: Integration with Google Secret Manager</li> <li>Network security: Firewall rules and IAM policies</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Ready to get started? Follow these essential steps:</p> <ol> <li>Prerequisites: Set up your Google Cloud environment and required tools</li> <li>Infrastructure: Deploy the Terraform infrastructure on Google Cloud</li> <li>Applications: Install ArgoCD and deploy the application stack</li> <li>Configuration: Configure HTTPS ingress and certificates</li> <li>Access: Access your ZenML and MLflow services</li> </ol> <p>New to MLOps?</p> <p>If you're new to MLOps or ZenML, start with our Getting Started Guide for a comprehensive walkthrough.</p>"},{"location":"#whats-included","title":"\ud83d\udee0\ufe0f What's Included","text":""},{"location":"#infrastructure-as-code","title":"Infrastructure as Code","text":"<ul> <li>Terraform Modules: Modular infrastructure components</li> <li>Google Cloud Resources: VPC, GKE, Cloud SQL, Storage, IAM</li> <li>Security: KMS encryption, Workload Identity, private networking</li> <li>Cost Optimization: Resource sizing and automated scaling</li> </ul>"},{"location":"#gitops-applications","title":"GitOps Applications","text":"<ul> <li>ArgoCD Applications: Declarative application deployment</li> <li>Helm Charts: Customized charts for ZenML and MLflow</li> <li>Kubernetes Manifests: Production-ready configurations</li> <li>External Secrets: Secure credential management</li> </ul>"},{"location":"#production-features","title":"Production Features","text":"<ul> <li>High Availability: Multi-zone deployment options</li> <li>Monitoring: Health checks and observability</li> <li>Backup &amp; Recovery: Automated database backups</li> <li>Scaling: Horizontal pod autoscaling and cluster autoscaling</li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":"<p>This stack is perfect for:</p> <ul> <li>ML Teams wanting production-ready infrastructure</li> <li>Data Scientists needing experiment tracking and model registry</li> <li>DevOps Engineers implementing MLOps best practices</li> <li>Organizations adopting GitOps workflows</li> <li>Startups to Enterprise requiring scalable ML infrastructure</li> </ul>"},{"location":"#quick-links","title":"\ud83d\udd17 Quick Links","text":"<ul> <li>Prerequisites - Set up your environment</li> <li>Quick Start - Deploy in minutes</li> <li>Architecture - Detailed system design</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#community","title":"\ud83e\udd1d Community","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Documentation: Improve guides and tutorials</li> <li>Community Forums: Join ZenML and ArgoCD discussions</li> </ul> <p>Ready to Deploy?</p> <p>Head over to Getting Started to begin your MLOps journey!</p>"},{"location":"applications/","title":"Applications","text":"<p>The ZenML MLOps stack includes several key applications deployed using GitOps principles with ArgoCD for declarative, version-controlled application management.</p>"},{"location":"applications/#application-stack","title":"\ud83c\udfaf Application Stack","text":""},{"location":"applications/#core-applications","title":"Core Applications","text":"<ul> <li>ArgoCD - GitOps continuous deployment platform</li> <li>Zenml Server - ML pipeline orchestration and model registry  </li> <li>MlFlow - Experiment tracking and model serving</li> </ul>"},{"location":"applications/#supporting-applications","title":"Supporting Applications","text":"<ul> <li>NGINX Ingress Controller - HTTP/HTTPS traffic routing</li> <li>cert-manager - Automatic TLS certificate management</li> <li>External Secrets Operator - Secure secret synchronization</li> </ul>"},{"location":"applications/#gitops-deployment","title":"\ud83d\udd04 GitOps Deployment","text":"<p>Applications are deployed using ArgoCD with synchronized deployment waves:</p> Wave Applications Purpose 0 External Secrets Operator Secret management foundation 1 Secret Store Configuration Connect to Google Secret Manager 2 cert-manager Certificate management setup 3 NGINX Ingress, Cluster Issuers Traffic routing and TLS 4 ZenML RBAC, ZenML Server ML platform deployment 5 MLflow Infrastructure, MLflow Server Experiment tracking"},{"location":"applications/#application-architecture","title":"\ud83d\udcca Application Architecture","text":"<pre><code>graph TB\n    subgraph \"External Traffic\"\n        A[Users/CI-CD]\n    end\n\n    subgraph \"Load Balancer\"\n        B[Google Cloud Load Balancer]\n    end\n\n    subgraph \"Ingress Layer\"\n        C[NGINX Ingress Controller]\n        D[cert-manager]\n    end\n\n    subgraph \"Application Layer\"\n        E[ZenML Server]\n        F[MLflow Server]  \n        G[ArgoCD Server]\n    end\n\n    subgraph \"Data Layer\"\n        H[Cloud SQL MySQL]\n        I[Google Cloud Storage]\n    end\n\n    A --&gt; B\n    B --&gt; C\n    D --&gt; C\n    C --&gt; E\n    C --&gt; F\n    C --&gt; G\n    E --&gt; H\n    F --&gt; H\n    E --&gt; I\n    F --&gt; I</code></pre>"},{"location":"applications/#deployment-process","title":"\ud83d\ude80 Deployment Process","text":""},{"location":"applications/#1-infrastructure-first","title":"1. Infrastructure First","text":"<ul> <li>VPC, GKE, Cloud SQL, and IAM deployed via Terraform</li> <li>Static IP addresses and DNS configuration</li> <li>Service accounts and security policies</li> </ul>"},{"location":"applications/#2-argocd-installation","title":"2. ArgoCD Installation","text":"<ul> <li>Deployed directly via kubectl (bootstrap)</li> <li>Manages all subsequent application deployments</li> <li>Provides GitOps workflow and UI</li> </ul>"},{"location":"applications/#3-application-deployment","title":"3. Application Deployment","text":"<ul> <li>Applications defined as ArgoCD Applications</li> <li>Automatic synchronization from Git repository</li> <li>Dependency management via sync waves</li> </ul>"},{"location":"applications/#application-configuration","title":"\ud83d\udd27 Application Configuration","text":""},{"location":"applications/#helm-values-override-pattern","title":"Helm Values Override Pattern","text":"<p>Each application uses custom values for environment-specific configuration:</p> <pre><code># ZenML custom values\nzenml:\n  serverURL: https://zenml.yourdomain.com\n  database:\n    url: mysql://zenml@private-ip:3306/zenml\n\nserviceAccount:\n  annotations:\n    iam.gke.io/gcp-service-account: zenml@project.iam.gserviceaccount.com\n</code></pre>"},{"location":"applications/#external-secrets-integration","title":"External Secrets Integration","text":"<p>Sensitive configuration is managed through External Secrets Operator:</p> <pre><code>apiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: zenml-database-secret\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    name: gcp-secret-store\n  target:\n    name: zenml-database-secret\n  data:\n  - secretKey: password\n    remoteRef:\n      key: zenml-database-password\n</code></pre>"},{"location":"applications/#access-networking","title":"\ud83c\udf10 Access &amp; Networking","text":""},{"location":"applications/#https-access","title":"HTTPS Access","text":"<p>All applications are accessible via HTTPS with automatic certificate management:</p> <ul> <li>ZenML: <code>https://zenml.yourdomain.com</code></li> <li>MLflow: <code>https://mlflow.yourdomain.com</code> </li> <li>ArgoCD: <code>https://argocd.yourdomain.com</code></li> </ul>"},{"location":"applications/#service-discovery","title":"Service Discovery","text":"<p>Applications communicate using Kubernetes service DNS: - Internal service-to-service communication - Load balancing and health checking - Network policies for security</p>"},{"location":"applications/#monitoring-health-checks","title":"\ud83d\udccb Monitoring &amp; Health Checks","text":""},{"location":"applications/#application-health","title":"Application Health","text":"<ul> <li>Liveness probes - Restart unhealthy containers</li> <li>Readiness probes - Route traffic to healthy instances  </li> <li>Startup probes - Handle slow-starting applications</li> </ul>"},{"location":"applications/#gitops-status","title":"GitOps Status","text":"<ul> <li>Sync status - Track deployment state</li> <li>Health status - Monitor application health</li> <li>Revision tracking - Version control for deployments</li> </ul>"},{"location":"applications/#application-details","title":"\ud83d\udd0d Application Details","text":""},{"location":"applications/#argocd-gitops-platform","title":"ArgoCD GitOps Platform","text":"<ul> <li>GitOps workflow - Declarative application management via Git</li> <li>Automatic synchronization - Continuous deployment from Git repositories  </li> <li>Health monitoring - Application status and health checks</li> <li>Rollback capabilities - Easy rollback to previous versions</li> <li>Web UI - Visual management interface</li> </ul>"},{"location":"applications/#zenml-server","title":"ZenML Server","text":"<ul> <li>Pipeline orchestration - ML workflow management and execution</li> <li>Model registry - Centralized model storage and versioning</li> <li>Artifact tracking - Data and model artifact lineage</li> <li>Stack management - Infrastructure and tool configuration</li> <li>Web dashboard - Pipeline monitoring and management</li> </ul>"},{"location":"applications/#mlflow-tracking-server","title":"MLflow Tracking Server","text":"<ul> <li>Experiment tracking - Log parameters, metrics, and artifacts</li> <li>Model registry - Model lifecycle management</li> <li>Model serving - Deploy models for inference</li> <li>Artifact storage - Integration with Google Cloud Storage</li> <li>Web UI - Experiment comparison and visualization</li> </ul>"},{"location":"applications/#management-operations","title":"\ud83d\udee0\ufe0f Management Operations","text":""},{"location":"applications/#application-updates","title":"Application Updates","text":"<pre><code># Manual sync specific application\nargocd app sync zenml-server\n\n# Sync all applications\nargocd app sync --all\n\n# Check application status\nkubectl get applications -n argocd\n</code></pre>"},{"location":"applications/#troubleshooting","title":"Troubleshooting","text":"<pre><code># Check application details\nkubectl describe application zenml-server -n argocd\n\n# View ArgoCD logs\nkubectl logs -n argocd deployment/argocd-application-controller\n\n# Check pod status\nkubectl get pods -n zenml\n</code></pre>"},{"location":"applications/#scaling-applications","title":"Scaling Applications","text":"<pre><code># Scale ZenML server\nkubectl scale deployment zenml-server -n zenml --replicas=3\n\n# Configure auto-scaling\nkubectl apply -f - &lt;&lt;EOF\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: zenml-server-hpa\n  namespace: zenml\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: zenml-server\n  minReplicas: 1\n  maxReplicas: 5\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\nEOF\n</code></pre> <p>GitOps Benefits</p> <p>Using ArgoCD for application deployment provides declarative configuration, version control, automated synchronization, and easy rollbacks.</p> <p>Custom Applications</p> <p>You can easily add your own applications by creating ArgoCD Application manifests in the <code>src/argocd-apps/</code> directory.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>This section covers the configuration aspects of your ZenML MLOps stack, including HTTPS setup, certificate management, and secret handling.</p>"},{"location":"configuration/#configuration-components","title":"\ud83d\udd27 Configuration Components","text":""},{"location":"configuration/#core-configuration-areas","title":"Core Configuration Areas","text":"<ul> <li>HTTPS &amp; Ingress - Load balancer, ingress controller, and routing</li> <li>SSL Certificates - Automatic TLS certificate management</li> <li>Secret Management - Secure credential storage and access</li> </ul>"},{"location":"configuration/#supporting-configuration","title":"Supporting Configuration","text":"<ul> <li>DNS Management - Domain configuration and routing</li> <li>Service Accounts - Identity and access management</li> <li>Network Policies - Traffic security and segmentation</li> </ul>"},{"location":"configuration/#network-configuration","title":"\ud83c\udf10 Network Configuration","text":""},{"location":"configuration/#traffic-flow-architecture","title":"Traffic Flow Architecture","text":"<pre><code>graph LR\n    A[Internet] --&gt; B[Cloud Load Balancer]\n    B --&gt; C[NGINX Ingress]\n    C --&gt; D[ZenML Server]\n    C --&gt; E[MLflow Server]\n    C --&gt; F[ArgoCD UI]\n\n    G[cert-manager] --&gt; H[Let's Encrypt]\n    H --&gt; I[TLS Certificates]\n    I --&gt; C</code></pre>"},{"location":"configuration/#domain-options","title":"Domain Options","text":""},{"location":"configuration/#option-1-nipio-developmenttesting","title":"Option 1: nip.io (Development/Testing)","text":"<p>Perfect for quick testing without DNS setup: <pre><code>zenml.34.102.136.180.nip.io\nmlflow.34.102.136.180.nip.io\nargocd.34.102.136.180.nip.io\n</code></pre></p>"},{"location":"configuration/#option-2-custom-domain-production","title":"Option 2: Custom Domain (Production)","text":"<p>Professional setup with your own domain: <pre><code>zenml.yourdomain.com\nmlflow.yourdomain.com\nargocd.yourdomain.com\n</code></pre></p>"},{"location":"configuration/#security-configuration","title":"\ud83d\udd12 Security Configuration","text":""},{"location":"configuration/#tlsssl-setup","title":"TLS/SSL Setup","text":"<ul> <li>Automatic certificates via Let's Encrypt</li> <li>HTTP to HTTPS redirect enforced</li> <li>Modern TLS versions (1.2+) only</li> <li>HSTS headers for security</li> </ul>"},{"location":"configuration/#secret-management","title":"Secret Management","text":"<ul> <li>External Secrets Operator synchronizes from Google Secret Manager</li> <li>Workload Identity for secure pod authentication</li> <li>Encrypted storage for sensitive data</li> <li>Least privilege access via RBAC</li> </ul>"},{"location":"configuration/#configuration-files","title":"\ud83d\udcdd Configuration Files","text":""},{"location":"configuration/#essential-configuration-files","title":"Essential Configuration Files","text":"<pre><code>src/\n\u251c\u2500\u2500 zenml/\n\u2502   \u2514\u2500\u2500 custom-values.yaml          # ZenML Helm chart customization\n\u251c\u2500\u2500 mlflow/\n\u2502   \u2514\u2500\u2500 values.yaml                 # MLflow configuration\n\u251c\u2500\u2500 k8s-cluster/\n\u2502   \u251c\u2500\u2500 external-secrets/\n\u2502   \u2502   \u2514\u2500\u2500 secret-store.yaml       # Secret Manager connection\n\u2502   \u251c\u2500\u2500 cert-manager/\n\u2502   \u2502   \u2514\u2500\u2500 cluster-issuers.yaml    # Certificate issuers\n\u2502   \u2514\u2500\u2500 ingress-nginx/\n\u2502       \u2514\u2500\u2500 service.yaml            # Load balancer configuration\n\u2514\u2500\u2500 infra/\n    \u2514\u2500\u2500 terraform.tfvars            # Infrastructure variables\n</code></pre>"},{"location":"configuration/#configuration-variables","title":"Configuration Variables","text":""},{"location":"configuration/#infrastructure-variables-terraformtfvars","title":"Infrastructure Variables (terraform.tfvars)","text":"<pre><code>project_id   = \"your-project-id\"\nproject_name = \"zenml-mlops\"\nregion       = \"us-central1\"\nzone         = \"us-central1-a\"\n\n# Optional domain configuration\ndomain_name = \"yourdomain.com\"\n</code></pre>"},{"location":"configuration/#application-variables","title":"Application Variables","text":"<pre><code># ZenML configuration\nzenml:\n  serverURL: https://zenml.yourdomain.com\n  database:\n    url: mysql://zenml@10.x.x.x:3306/zenml\n\n# MLflow configuration  \nmysql:\n  host: \"10.x.x.x\"\n  database: \"mlflow\"\nartifactRoot:\n  gcs:\n    bucket: \"your-project-mlflow-artifacts\"\n</code></pre>"},{"location":"configuration/#configuration-management","title":"\ud83d\udd04 Configuration Management","text":""},{"location":"configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"configuration/#development-environment","title":"Development Environment","text":"<pre><code># Relaxed security for development\ningress:\n  annotations:\n    cert-manager.io/cluster-issuer: \"letsencrypt-staging\"\n\nresources:\n  requests:\n    cpu: 100m\n    memory: 256Mi\n\nreplicas: 1\n</code></pre>"},{"location":"configuration/#production-environment","title":"Production Environment","text":"<pre><code># Production-ready configuration\ningress:\n  annotations:\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n\nresources:\n  requests:\n    cpu: 500m\n    memory: 1Gi\n  limits:\n    cpu: 2000m\n    memory: 4Gi\n\nreplicas: 3\n</code></pre>"},{"location":"configuration/#configuration-updates","title":"Configuration Updates","text":""},{"location":"configuration/#gitops-workflow","title":"GitOps Workflow","text":"<ol> <li>Update configuration files in Git repository</li> <li>Commit changes to version control</li> <li>ArgoCD automatically syncs changes to cluster</li> <li>Applications restart with new configuration</li> </ol>"},{"location":"configuration/#manual-updates","title":"Manual Updates","text":"<pre><code># Update Helm values\nhelm upgrade zenml-server oci://public.ecr.aws/zenml/zenml \\\n  -f custom-values.yaml \\\n  -n zenml\n\n# Update ConfigMaps\nkubectl create configmap app-config \\\n  --from-file=config.yaml \\\n  --dry-run=client -o yaml | kubectl apply -f -\n</code></pre>"},{"location":"configuration/#configuration-validation","title":"\ud83d\udd0d Configuration Validation","text":""},{"location":"configuration/#pre-deployment-checks","title":"Pre-Deployment Checks","text":"<pre><code># Validate Terraform configuration\nterraform validate\nterraform plan\n\n# Validate Kubernetes manifests\nkubectl apply --dry-run=client -f manifest.yaml\n\n# Validate Helm charts\nhelm template . --values values.yaml\n</code></pre>"},{"location":"configuration/#post-deployment-verification","title":"Post-Deployment Verification","text":"<pre><code># Check ingress configuration\nkubectl get ingress --all-namespaces\n\n# Verify certificates\nkubectl get certificates --all-namespaces\n\n# Test external access\ncurl -I https://zenml.yourdomain.com\n</code></pre>"},{"location":"configuration/#customization-examples","title":"\ud83d\udee0\ufe0f Customization Examples","text":""},{"location":"configuration/#custom-ingress-annotations","title":"Custom Ingress Annotations","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/proxy-body-size: \"50m\"\n    nginx.ingress.kubernetes.io/rate-limit: \"100\"\n</code></pre>"},{"location":"configuration/#custom-resource-limits","title":"Custom Resource Limits","text":"<pre><code>resources:\n  requests:\n    cpu: \"500m\"\n    memory: \"1Gi\"\n    ephemeral-storage: \"1Gi\"\n  limits:\n    cpu: \"2000m\"  \n    memory: \"4Gi\"\n    ephemeral-storage: \"10Gi\"\n</code></pre>"},{"location":"configuration/#custom-scaling-configuration","title":"Custom Scaling Configuration","text":"<pre><code>autoscaling:\n  enabled: true\n  minReplicas: 2\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 70\n  targetMemoryUtilizationPercentage: 80\n</code></pre>"},{"location":"configuration/#detailed-configuration-guides","title":"\ud83d\udccb Detailed Configuration Guides","text":""},{"location":"configuration/#https-ingress-setup","title":"HTTPS &amp; Ingress Setup","text":"<ul> <li>NGINX Ingress Controller - HTTP/HTTPS traffic routing and load balancing</li> <li>Google Cloud Load Balancer - External traffic distribution with static IP</li> <li>Domain configuration - Support for custom domains and nip.io wildcard DNS</li> <li>SSL redirect - Automatic HTTP to HTTPS redirection</li> </ul>"},{"location":"configuration/#ssl-certificate-management","title":"SSL Certificate Management","text":"<p>Complete TLS certificate automation with cert-manager: - Let's Encrypt integration - Free, automatic SSL certificates - Staging and production issuers - Test with staging, deploy with production - HTTP-01 challenge - Domain validation via temporary ingress routes - Automatic renewal - Certificates renew automatically 30 days before expiration</p>"},{"location":"configuration/#secret-management_1","title":"Secret Management","text":"<p>Secure credential handling with External Secrets Operator: - Google Secret Manager integration - Centralized secret storage - Workload Identity - Secure authentication without storing keys - Automatic synchronization - Secrets sync from Secret Manager to Kubernetes - Secret rotation - Support for credential rotation and updates</p>"},{"location":"configuration/#common-configuration-issues","title":"\ud83d\udea8 Common Configuration Issues","text":""},{"location":"configuration/#certificate-problems","title":"Certificate Problems","text":"<ul> <li>Incorrect domain DNS configuration  </li> <li>Let's Encrypt rate limiting</li> <li>ClusterIssuer misconfiguration</li> <li>Missing ingress annotations</li> </ul>"},{"location":"configuration/#ingress-issues","title":"Ingress Issues","text":"<ul> <li>LoadBalancer IP not assigned</li> <li>Incorrect service backend configuration</li> <li>Firewall blocking traffic</li> <li>DNS resolution failures</li> </ul>"},{"location":"configuration/#secret-management-issues","title":"Secret Management Issues","text":"<ul> <li>Workload Identity not configured</li> <li>Secret Manager permissions missing</li> <li>External Secrets Operator not running</li> <li>Incorrect secret references</li> </ul> <p>Configuration Best Practices</p> <ul> <li>Use staging certificates for testing</li> <li>Version control all configuration files</li> <li>Validate configurations before deployment</li> <li>Monitor certificate expiration dates</li> </ul> <p>Production Considerations</p> <ul> <li>Always use production certificate issuers for public services</li> <li>Implement proper resource limits</li> <li>Set up monitoring and alerting</li> <li>Regular backup of configuration</li> </ul>"},{"location":"configuration/certificates/","title":"SSL Certificate Management","text":"<p>This guide covers SSL/TLS certificate management using cert-manager and Let's Encrypt for your ZenML MLOps stack.</p>"},{"location":"configuration/certificates/#certificate-architecture","title":"\ud83d\udd12 Certificate Architecture","text":"<pre><code>graph TD\n    A[User Request] --&gt; B[LoadBalancer]\n    B --&gt; C[NGINX Ingress]\n    C --&gt; D[TLS Termination]\n    D --&gt; E[Backend Services]\n\n    F[cert-manager] --&gt; G[Let's Encrypt]\n    G --&gt; H[Certificate]\n    H --&gt; D\n\n    I[Ingress Resource] --&gt; F\n    J[ClusterIssuer] --&gt; F</code></pre>"},{"location":"configuration/certificates/#certificate-flow","title":"\ud83d\udccb Certificate Flow","text":""},{"location":"configuration/certificates/#1-user-creates-ingress-with-tls","title":"1. User Creates Ingress with TLS","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: zenml-server\n  namespace: zenml\n  annotations:\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - zenml.yourdomain.com\n    secretName: zenml-tls-secret\n  rules:\n  - host: zenml.yourdomain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: zenml-server\n            port:\n              number: 8080\n</code></pre>"},{"location":"configuration/certificates/#2-cert-manager-detects-the-ingress","title":"2. cert-manager Detects the Ingress","text":"<ul> <li>Ingress controller watches all Ingress resources</li> <li>Sees <code>cert-manager.io/cluster-issuer</code> annotation</li> <li>Checks if certificate secret exists</li> </ul>"},{"location":"configuration/certificates/#3-certificate-resource-created","title":"3. Certificate Resource Created","text":"<p>cert-manager automatically creates: <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: zenml-certificate\n  namespace: zenml\nspec:\n  secretName: zenml-tls-secret\n  issuerRef:\n    name: letsencrypt-prod\n    kind: ClusterIssuer\n  dnsNames:\n  - zenml.yourdomain.com\n</code></pre></p>"},{"location":"configuration/certificates/#4-acme-challenge-process","title":"4. ACME Challenge Process","text":"<ol> <li>Order Creation: cert-manager creates an ACME Order with Let's Encrypt</li> <li>Challenge Setup: Creates HTTP-01 challenge</li> <li>Temporary Ingress: Creates temporary route for <code>/.well-known/acme-challenge/</code></li> <li>Let's Encrypt Validation: LE checks if you control the domain</li> <li>Certificate Issuance: LE issues the certificate if validation passes</li> </ol>"},{"location":"configuration/certificates/#5-certificate-storage","title":"5. Certificate Storage","text":"<ul> <li>Certificate stored as Kubernetes Secret</li> <li>Secret contains: private key, certificate, CA bundle</li> <li>NGINX Ingress automatically uses the secret for TLS termination</li> </ul>"},{"location":"configuration/certificates/#clusterissuer-configuration","title":"\ud83d\udd27 ClusterIssuer Configuration","text":""},{"location":"configuration/certificates/#staging-issuer-for-testing","title":"Staging Issuer (for testing)","text":"<pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-staging\nspec:\n  acme:\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    email: your-email@domain.com\n    privateKeySecretRef:\n      name: letsencrypt-staging\n    solvers:\n    - http01:\n        ingress:\n          class: nginx\n</code></pre>"},{"location":"configuration/certificates/#production-issuer","title":"Production Issuer","text":"<pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: your-email@domain.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx\n</code></pre>"},{"location":"configuration/certificates/#using-different-domain-options","title":"\ud83d\ude80 Using Different Domain Options","text":""},{"location":"configuration/certificates/#option-1-nipio-no-dns-setup","title":"Option 1: nip.io (No DNS Setup)","text":"<p>Perfect for testing and development:</p> <pre><code># Example: 34.102.136.180.nip.io\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: zenml-server\n  annotations:\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - zenml.34.102.136.180.nip.io\n    secretName: zenml-nip-tls\n  rules:\n  - host: zenml.34.102.136.180.nip.io\n</code></pre>"},{"location":"configuration/certificates/#option-2-custom-domain","title":"Option 2: Custom Domain","text":"<p>For production use:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: zenml-server\n  annotations:\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - zenml.yourdomain.com\n    secretName: zenml-custom-tls\n  rules:\n  - host: zenml.yourdomain.com\n</code></pre>"},{"location":"configuration/certificates/#certificate-status-monitoring","title":"\ud83d\udd0d Certificate Status Monitoring","text":""},{"location":"configuration/certificates/#check-certificate-status","title":"Check Certificate Status","text":"<pre><code># List all certificates\nkubectl get certificates -A\n\n# Check specific certificate\nkubectl describe certificate zenml-tls -n zenml\n\n# Check certificate secret\nkubectl get secret zenml-tls -n zenml -o yaml\n</code></pre>"},{"location":"configuration/certificates/#certificate-status-examples","title":"Certificate Status Examples","text":""},{"location":"configuration/certificates/#working-certificate","title":"\u2705 Working Certificate","text":"<pre><code>status:\n  conditions:\n  - type: Ready\n    status: \"True\"\n    reason: Ready\n    message: Certificate is up to date and has not expired\n  notAfter: \"2025-11-29T10:30:45Z\"\n</code></pre>"},{"location":"configuration/certificates/#staging-certificate","title":"\u26a0\ufe0f Staging Certificate","text":"<pre><code>status:\n  conditions:\n  - type: Ready\n    status: \"True\" \n    reason: Ready\n    message: Certificate is up to date and has not expired\n  # Note: Browser will show \"Not Secure\" but certificate works\n</code></pre>"},{"location":"configuration/certificates/#failed-certificate","title":"\u274c Failed Certificate","text":"<pre><code>status:\n  conditions:\n  - type: Ready\n    status: \"False\"\n    reason: Failed\n    message: \"Failed to finalize order: acme: error: 400...\"\n</code></pre>"},{"location":"configuration/certificates/#certificate-management","title":"\ud83d\udee0\ufe0f Certificate Management","text":""},{"location":"configuration/certificates/#force-certificate-renewal","title":"Force Certificate Renewal","text":"<pre><code># Delete certificate to force renewal\nkubectl delete certificate zenml-tls -n zenml\n\n# Check if new certificate is being issued\nkubectl get certificaterequests -n zenml -w\n</code></pre>"},{"location":"configuration/certificates/#update-certificate-issuer","title":"Update Certificate Issuer","text":"<pre><code># Change from staging to production\nkubectl patch ingress zenml-server -n zenml -p \\\n'{\"metadata\":{\"annotations\":{\"cert-manager.io/cluster-issuer\":\"letsencrypt-prod\"}}}'\n\n# Delete existing certificate to trigger new one\nkubectl delete certificate zenml-tls -n zenml\n</code></pre>"},{"location":"configuration/certificates/#certificate-backup","title":"Certificate Backup","text":"<pre><code># Backup certificate secret\nkubectl get secret zenml-tls -n zenml -o yaml &gt; zenml-cert-backup.yaml\n\n# Restore certificate\nkubectl apply -f zenml-cert-backup.yaml\n</code></pre>"},{"location":"configuration/certificates/#advanced-configuration","title":"\ud83d\udd27 Advanced Configuration","text":""},{"location":"configuration/certificates/#wildcard-certificates","title":"Wildcard Certificates","text":"<p>For multiple subdomains:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: wildcard-cert\n  namespace: zenml\nspec:\n  secretName: wildcard-tls\n  issuerRef:\n    name: letsencrypt-prod\n    kind: ClusterIssuer\n  dnsNames:\n  - \"*.yourdomain.com\"\n  - \"yourdomain.com\"\n</code></pre>"},{"location":"configuration/certificates/#custom-certificate-authority","title":"Custom Certificate Authority","text":"<p>For private CA:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: private-ca-issuer\nspec:\n  ca:\n    secretName: private-ca-key-pair\n</code></pre>"},{"location":"configuration/certificates/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":"<p>For certificate troubleshooting:</p> <ul> <li>DNS validation failures</li> <li>Rate limiting issues</li> <li>Certificate not appearing in browser</li> <li>ACME challenge failures</li> <li>Migration from staging to production</li> </ul>"},{"location":"configuration/certificates/#best-practices","title":"\ud83d\udcda Best Practices","text":""},{"location":"configuration/certificates/#security","title":"Security","text":"<ul> <li>Always use production issuers for public-facing services</li> <li>Keep email addresses up to date for certificate notifications</li> <li>Monitor certificate expiration dates</li> <li>Use staging issuer for testing to avoid rate limits</li> </ul>"},{"location":"configuration/certificates/#performance","title":"Performance","text":"<ul> <li>Use wildcard certificates for multiple subdomains</li> <li>Cache certificate secrets to reduce API calls</li> <li>Monitor cert-manager resource usage</li> </ul>"},{"location":"configuration/certificates/#maintenance","title":"Maintenance","text":"<ul> <li>Set up alerts for certificate expiration</li> <li>Regularly backup certificate secrets</li> <li>Test certificate renewal process</li> <li>Keep cert-manager updated</li> </ul> <p>Testing Certificates</p> <p>Always test with the staging issuer first to avoid hitting Let's Encrypt rate limits (50 certificates per registered domain per week).</p> <p>Rate Limits</p> <p>Let's Encrypt has rate limits. If you hit them, you'll need to wait or use the staging environment.</p> <p>Certificate Validity</p> <p>Let's Encrypt certificates are valid for 90 days and auto-renew 30 days before expiration.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to the ZenML MLOps Stack! This section will guide you through the complete setup process, from preparing your environment to accessing your deployed services.</p>"},{"location":"getting-started/#overview","title":"\ud83d\udccb Overview","text":"<p>The deployment process consists of these key steps:</p> <ol> <li>Prerequisites - Set up your Google Cloud environment and install required tools</li> <li>Quick Start - Deploy your complete MLOps stack</li> </ol>"},{"location":"getting-started/#deployment-options","title":"\ud83c\udfaf Deployment Options","text":""},{"location":"getting-started/#quick-start-30-minutes","title":"Quick Start (30 minutes)","text":"<p>Perfect for evaluation and testing: - Minimal configuration required - Uses default settings - nip.io domains for easy access - Single-zone deployment</p>"},{"location":"getting-started/#production-customization","title":"Production Customization","text":"<p>The Quick Start guide includes options for production features: - Custom domain configuration (optional) - HTTPS with automatic certificates - Production-grade security settings - Built-in monitoring and backup</p>"},{"location":"getting-started/#what-youll-deploy","title":"\ud83d\udd27 What You'll Deploy","text":"<p>By the end of this guide, you'll have:</p> <ul> <li>\u2705 GKE Autopilot Cluster - Fully managed Kubernetes</li> <li>\u2705 Cloud SQL MySQL - Managed database for metadata</li> <li>\u2705 ZenML Server - ML pipeline orchestration</li> <li>\u2705 MLflow Server - Experiment tracking and model registry</li> <li>\u2705 ArgoCD - GitOps continuous deployment</li> <li>\u2705 HTTPS Access - Secure access with automatic certificates</li> </ul>"},{"location":"getting-started/#ready-to-start","title":"\ud83d\ude80 Ready to Start?","text":"<p>Ready to get started?</p> <p>Quick Start Guide</p> <p>First Time?</p> <p>If this is your first time deploying infrastructure on Google Cloud, we recommend starting with the Prerequisites to ensure your environment is properly configured.</p>"},{"location":"getting-started/prerequisites/","title":"Prerequisites","text":"<p>Before starting the deployment, ensure you have the following tools and configurations in place.</p>"},{"location":"getting-started/prerequisites/#required-tools","title":"\ud83d\udee0\ufe0f Required Tools","text":""},{"location":"getting-started/prerequisites/#google-cloud-sdk","title":"Google Cloud SDK","text":"<p>The <code>gcloud</code> CLI is essential for managing Google Cloud resources.</p> <pre><code># Install Google Cloud SDK (if not already installed)\ncurl https://sdk.cloud.google.com | bash\nexec -l $SHELL\n\n# Verify installation\ngcloud version\n</code></pre>"},{"location":"getting-started/prerequisites/#terraform","title":"Terraform","text":"<p>Infrastructure as Code tool for provisioning Google Cloud resources.</p> <pre><code># Install Terraform (macOS with Homebrew)\nbrew install terraform\n\n# Install Terraform (Linux)\nwget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip\nunzip terraform_1.6.0_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\n\n# Verify installation\nterraform version\n</code></pre>"},{"location":"getting-started/prerequisites/#kubectl","title":"kubectl","text":"<p>Kubernetes command-line tool for cluster management.</p> <pre><code># Install kubectl\ngcloud components install kubectl\n\n# Or with Homebrew (macOS)\nbrew install kubectl\n\n# Verify installation\nkubectl version --client\n</code></pre>"},{"location":"getting-started/prerequisites/#helm","title":"Helm","text":"<p>Package manager for Kubernetes applications.</p> <pre><code># Install Helm\ncurl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n\n# Or with Homebrew (macOS)\nbrew install helm\n\n# Verify installation\nhelm version\n</code></pre>"},{"location":"getting-started/prerequisites/#google-cloud-setup","title":"\u2601\ufe0f Google Cloud Setup","text":""},{"location":"getting-started/prerequisites/#1-create-or-select-a-project","title":"1. Create or Select a Project","text":"<pre><code># Create a new project (optional)\ngcloud projects create YOUR-PROJECT-ID --name=\"ZenML MLOps Stack\"\n\n# Set the project\ngcloud config set project YOUR-PROJECT-ID\n\n# Verify project selection\ngcloud config get-value project\n</code></pre>"},{"location":"getting-started/prerequisites/#2-enable-billing","title":"2. Enable Billing","text":"<p>Ensure billing is enabled on your project:</p> <ol> <li>Go to the Google Cloud Console</li> <li>Navigate to Billing \u2192 Link a billing account</li> <li>Select or create a billing account</li> </ol>"},{"location":"getting-started/prerequisites/#3-enable-required-apis","title":"3. Enable Required APIs","text":"<p>The following APIs will be automatically enabled by Terraform, but you can enable them manually if needed:</p> <pre><code># Enable required APIs\ngcloud services enable \\\n  container.googleapis.com \\\n  compute.googleapis.com \\\n  cloudsql.googleapis.com \\\n  secretmanager.googleapis.com \\\n  cloudkms.googleapis.com \\\n  servicenetworking.googleapis.com \\\n  dns.googleapis.com \\\n  storage.googleapis.com \\\n  artifactregistry.googleapis.com\n</code></pre>"},{"location":"getting-started/prerequisites/#authentication","title":"\ud83d\udd10 Authentication","text":""},{"location":"getting-started/prerequisites/#application-default-credentials","title":"Application Default Credentials","text":"<pre><code># Authenticate with Google Cloud\ngcloud auth login\n\n# Set up Application Default Credentials (ADC)\ngcloud auth application-default login\n\n# Verify authentication\ngcloud auth list\n</code></pre>"},{"location":"getting-started/prerequisites/#project-setup","title":"\ud83d\udcc1 Project Setup","text":""},{"location":"getting-started/prerequisites/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/Philippe-Neveux/zenml-mlops-stack.git\ncd zenml-mlops-stack\n</code></pre>"},{"location":"getting-started/prerequisites/#2-create-terraform-backend-storage","title":"2. Create Terraform Backend Storage","text":"<p>For production deployments, use remote state storage:</p> <pre><code># Create a bucket for Terraform state (replace YOUR_PROJECT_ID)\ngsutil mb gs://tf-backends-YOUR_PROJECT_ID\n\n# Enable versioning for state backup\ngsutil versioning set on gs://tf-backends-YOUR_PROJECT_ID\n</code></pre>"},{"location":"getting-started/prerequisites/#3-configure-variables","title":"3. Configure Variables","text":"<p>Copy and customize the Terraform variables:</p> <pre><code># Copy example variables\ncp src/infra/terraform.tfvars.example src/infra/terraform.tfvars\n\n# Edit with your values\nnano src/infra/terraform.tfvars\n</code></pre> <p>Required variables: <pre><code># Project Configuration\nproject_id   = \"your-project-id\"\nproject_name = \"zenml-mlops\"\nregion       = \"us-central1\"\nzone         = \"us-central1-a\"\n\n# Optional: Custom domain\n# domain_name = \"yourdomain.com\"\n</code></pre></p>"},{"location":"getting-started/prerequisites/#verify-setup","title":"\ud83e\uddea Verify Setup","text":"<p>Test your setup before proceeding:</p> <pre><code># Verify Terraform\nterraform version\n\n# Verify Google Cloud access\ngcloud projects describe $(gcloud config get-value project)\n\n# Verify kubectl\nkubectl version --client\n\n# Verify Helm\nhelm version\n</code></pre>"},{"location":"getting-started/prerequisites/#recommended-iam-permissions","title":"\ud83d\udca1 Recommended IAM Permissions","text":"<p>Your Google Cloud user or service account needs these roles:</p> <ul> <li>Kubernetes Engine Admin - Manage GKE clusters</li> <li>Compute Network Admin - Manage VPC and networking</li> <li>Cloud SQL Admin - Manage database instances</li> <li>Security Admin - Manage IAM and security</li> <li>Service Account Admin - Manage service accounts</li> <li>Secret Manager Admin - Manage secrets</li> <li>Storage Admin - Manage Cloud Storage</li> <li>DNS Administrator - Manage DNS (if using custom domains)</li> </ul>"},{"location":"getting-started/prerequisites/#important-notes","title":"\u26a0\ufe0f Important Notes","text":"<p>Project Permissions</p> <p>Ensure you have <code>Owner</code> or <code>Editor</code> permissions on the Google Cloud project, as the deployment creates various resources and IAM bindings.</p> <p>Billing</p> <p>This deployment will create billable resources. See the cost estimation in the reference section for details.</p> <p>Region Selection</p> <p>Choose a region close to your users for better performance. Popular choices are: - <code>us-central1</code> (Iowa) - <code>us-east1</code> (South Carolina) - <code>europe-west1</code> (Belgium) - <code>asia-southeast1</code> (Singapore)</p>"},{"location":"getting-started/prerequisites/#next-steps","title":"\ud83c\udf89 Next Steps","text":"<p>Once you have all prerequisites installed and configured:</p> <ul> <li>Quick Start - For complete deployment setup</li> </ul> <p>Need Help?</p> <p>If you encounter issues with the prerequisites, check our troubleshooting guide or open an issue on GitHub.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get your ZenML MLOps stack running in just 15 minutes! This guide uses default configurations and nip.io domains for easy testing.</p>"},{"location":"getting-started/quick-start/#deploy-infrastructure","title":"\ud83d\ude80 Deploy Infrastructure","text":""},{"location":"getting-started/quick-start/#step-1-prepare-your-environment","title":"Step 1: Prepare Your Environment","text":"<pre><code># Clone the repository\ngit clone https://github.com/Philippe-Neveux/zenml-mlops-stack.git\ncd zenml-mlops-stack\n\n# Set your project ID\nexport PROJECT_ID=\"your-project-id\"\ngcloud config set project $PROJECT_ID\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-configure-terraform-backend","title":"Step 2: Configure Terraform Backend","text":"<pre><code># Create GCS bucket for Terraform state\ngsutil mb gs://tf-backends-$PROJECT_ID\ngsutil versioning set on gs://tf-backends-$PROJECT_ID\n\n# Update backend configuration\nsed -i \"s/YOUR_PROJECT_ID/$PROJECT_ID/g\" src/infra/main.tf\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-configure-variables","title":"Step 3: Configure Variables","text":"<pre><code># Create terraform.tfvars with minimal config\ncat &gt; src/infra/terraform.tfvars &lt;&lt; EOF\nproject_id   = \"$PROJECT_ID\"\nproject_name = \"zenml-mlops\"\nregion       = \"us-central1\"\nzone         = \"us-central1-a\"\nEOF\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-deploy-infrastructure","title":"Step 4: Deploy Infrastructure","text":"<pre><code>cd src/infra\n\n# Initialize Terraform\nterraform init\n\n# Plan deployment\nterraform plan\n\n# Apply infrastructure (takes ~10 minutes)\nterraform apply -auto-approve\n</code></pre>"},{"location":"getting-started/quick-start/#configure-kubernetes","title":"\ud83d\udd27 Configure Kubernetes","text":""},{"location":"getting-started/quick-start/#step-1-connect-to-gke-cluster","title":"Step 1: Connect to GKE Cluster","text":"<pre><code># Get cluster credentials\ngcloud container clusters get-credentials zenml-mlops-us-central1 \\\n  --region us-central1 --project $PROJECT_ID\n\n# Verify connection\nkubectl get nodes\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-install-argocd","title":"Step 2: Install ArgoCD","text":"<pre><code># Create ArgoCD namespace\nkubectl create namespace argocd\n\n# Install ArgoCD\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Wait for ArgoCD to be ready\nkubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd\n\n# Expose ArgoCD with LoadBalancer\nkubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-get-access-information","title":"Step 3: Get Access Information","text":"<pre><code># Get ArgoCD admin password\nkubectl -n argocd get secret argocd-initial-admin-secret \\\n  -o jsonpath=\"{.data.password}\" | base64 -d; echo\n\n# Get ArgoCD external IP (wait for it to be assigned)\nkubectl get svc argocd-server -n argocd\n\n# Get NGINX ingress IP for applications\nkubectl get svc -n nginx-ingress nginx-ingress-controller 2&gt;/dev/null || echo \"Will be available after app deployment\"\n</code></pre>"},{"location":"getting-started/quick-start/#deploy-applications","title":"\ud83d\udcf1 Deploy Applications","text":""},{"location":"getting-started/quick-start/#step-1-update-configuration-files","title":"Step 1: Update Configuration Files","text":"<pre><code># Get the static IP from Terraform\nexport NGINX_IP=$(cd src/infra &amp;&amp; terraform output -raw nginx_ingress_ip)\n\n# Update external secrets with your project ID\nsed -i \"s/&lt;put-your-porject-id-here&gt;/$PROJECT_ID/g\" \\\n  src/k8s-cluster/external-secrets/secret-store.yaml\n\n# Update ZenML values with IP and project\nsed -i \"s/&lt;nginx-publc-ip-adress&gt;/$NGINX_IP/g\" src/zenml/custom-values.yaml\nsed -i \"s/&lt;your-project-id&gt;/$PROJECT_ID/g\" src/zenml/custom-values.yaml\n\n# Get MySQL private IP\nexport MYSQL_IP=$(cd src/infra &amp;&amp; terraform output -raw mysql_instance_private_ip)\nsed -i \"s/&lt;mysql-private-ip-adress&gt;/$MYSQL_IP/g\" src/zenml/custom-values.yaml\n\n# Update MLflow configuration\nsed -i \"s/&lt;your-project-id&gt;/$PROJECT_ID/g\" src/mlflow/values.yaml\nsed -i \"s/X.X.X.X/$MYSQL_IP/g\" src/mlflow/values.yaml\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-deploy-all-applications","title":"Step 2: Deploy All Applications","text":"<pre><code># Deploy all ArgoCD applications\nkubectl apply -f src/argocd-apps/\n\n# Wait for applications to sync\nkubectl get applications -n argocd -w\n</code></pre>"},{"location":"getting-started/quick-start/#access-your-services","title":"\ud83c\udf10 Access Your Services","text":""},{"location":"getting-started/quick-start/#get-service-urls","title":"Get Service URLs","text":"<pre><code>echo \"=== ZenML &amp; MLflow Access URLs ===\"\necho \"ZenML Server: https://zenml-server.$NGINX_IP.nip.io\"\necho \"MLflow Server: https://mlflow.$NGINX_IP.nip.io\"\necho \"\"\necho \"=== ArgoCD Access ===\"\necho \"ArgoCD UI: http://$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\"\necho \"Username: admin\"\necho \"Password: $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d)\"\n</code></pre>"},{"location":"getting-started/quick-start/#verify-deployments","title":"Verify Deployments","text":"<pre><code># Check all pods are running\nkubectl get pods --all-namespaces\n\n# Check ingress status\nkubectl get ingress --all-namespaces\n\n# Check certificates (should be Ready)\nkubectl get certificates --all-namespaces\n</code></pre>"},{"location":"getting-started/quick-start/#test-your-setup","title":"\ud83c\udfaf Test Your Setup","text":""},{"location":"getting-started/quick-start/#zenml-connection-test","title":"ZenML Connection Test","text":"<pre><code># Test ZenML server connectivity\ncurl -k https://zenml-server.$NGINX_IP.nip.io/health\n\n# Expected response: {\"status\": \"OK\"}\n</code></pre>"},{"location":"getting-started/quick-start/#mlflow-connection-test","title":"MLflow Connection Test","text":"<pre><code># Test MLflow server connectivity\ncurl -k https://mlflow.$NGINX_IP.nip.io\n\n# Should return MLflow UI HTML\n</code></pre>"},{"location":"getting-started/quick-start/#whats-next","title":"\ud83d\udcca What's Next?","text":"<p>Your ZenML MLOps stack is now ready! Here's what you can do:</p>"},{"location":"getting-started/quick-start/#1-set-up-zenml-client","title":"1. Set Up ZenML Client","text":"<pre><code># Install ZenML\npip install zenml[server]\n\n# Connect to your ZenML server\nzenml connect --url https://zenml-server.$NGINX_IP.nip.io\n\n# Create a default user\nzenml user create default --password password123\n</code></pre>"},{"location":"getting-started/quick-start/#2-configure-mlflow-integration","title":"2. Configure MLflow Integration","text":"<pre><code># Register MLflow experiment tracker\nzenml experiment-tracker register mlflow_tracker \\\n  --flavor=mlflow \\\n  --tracking_uri=https://mlflow.$NGINX_IP.nip.io\n</code></pre>"},{"location":"getting-started/quick-start/#3-set-up-cicd","title":"3. Set Up CI/CD","text":"<p>For GitHub Actions integration:</p> <ol> <li>Add repository secrets:</li> <li><code>ZENML_STORE_URL</code>: <code>https://zenml-server.$NGINX_IP.nip.io</code></li> <li><code>ZENML_API_KEY</code>: (create service account key with ZenML CLI)</li> </ol> <pre><code># Create service account for CI/CD\nzenml service-account create github_action_api_key\n# Copy the displayed API key to GitHub secrets\n</code></pre>"},{"location":"getting-started/quick-start/#monitoring","title":"\ud83d\udd0d Monitoring","text":"<p>Monitor your deployment:</p> <pre><code># Check ArgoCD application status\nkubectl get applications -n argocd\n\n# Monitor pods\nkubectl get pods --all-namespaces\n\n# Check ingress and certificates\nkubectl get ingress,certificates --all-namespaces\n</code></pre>"},{"location":"getting-started/quick-start/#cleanup-optional","title":"\ud83e\uddf9 Cleanup (Optional)","text":"<p>To remove everything:</p> <pre><code># Delete Kubernetes resources\nkubectl delete -f src/argocd-apps/\nkubectl delete namespace argocd\n\n# Destroy Terraform infrastructure\ncd src/infra\nterraform destroy -auto-approve\n\n# Delete GCS bucket\ngsutil rm -r gs://tf-backends-$PROJECT_ID\n</code></pre> <p>Congratulations!</p> <p>Your ZenML MLOps stack is now running! You can access ZenML and MLflow through their respective URLs.</p> <p>Production Features</p> <p>This guide includes production-ready features like HTTPS certificates, secure networking, and monitoring.</p> <p>Issues?</p> <p>If you encounter problems, check the troubleshooting guide.</p>"},{"location":"infrastructure/","title":"Infrastructure","text":"<p>The ZenML MLOps stack is built on a robust, production-ready infrastructure on Google Cloud Platform using Infrastructure as Code (Terraform).</p>"},{"location":"infrastructure/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Google Cloud Platform\"\n        subgraph \"VPC Network\"\n            subgraph \"GKE Autopilot Cluster\"\n                A[ZenML Server]\n                B[MLflow Server]\n                C[ArgoCD]\n            end\n\n            D[Cloud SQL MySQL]\n            E[Cloud Storage]\n            F[Artifact Registry]\n        end\n\n        G[Cloud Load Balancer]\n        H[Cloud DNS]\n        I[Secret Manager]\n        J[Cloud KMS]\n    end\n\n    K[Users] --&gt; G\n    G --&gt; A\n    G --&gt; B\n    A --&gt; D\n    B --&gt; D\n    A --&gt; E\n    B --&gt; E</code></pre>"},{"location":"infrastructure/#infrastructure-components","title":"\ud83d\udccb Infrastructure Components","text":""},{"location":"infrastructure/#core-services","title":"Core Services","text":"<ul> <li>GKE Autopilot - Fully managed Kubernetes cluster</li> <li>MySQL Database - Cloud SQL for metadata storage</li> <li>Networking &amp; Security - VPC, firewalls, and security</li> <li>Terraform Modules - Infrastructure as Code components</li> </ul>"},{"location":"infrastructure/#supporting-services","title":"Supporting Services","text":"<ul> <li>Cloud Storage - Object storage for ML artifacts and models</li> <li>Artifact Registry - Container image storage</li> <li>Secret Manager - Secure credential storage</li> <li>Cloud KMS - Encryption key management</li> <li>Cloud DNS - Domain name resolution (optional)</li> </ul>"},{"location":"infrastructure/#deployment-features","title":"\ud83d\ude80 Deployment Features","text":""},{"location":"infrastructure/#production-ready","title":"Production-Ready","text":"<ul> <li>High Availability - Multi-zone deployment options</li> <li>Security - Private networks, encryption, IAM</li> <li>Scalability - Auto-scaling clusters and storage</li> <li>Monitoring - Built-in observability and logging</li> </ul>"},{"location":"infrastructure/#cost-optimized","title":"Cost-Optimized","text":"<ul> <li>Pay-per-use - GKE Autopilot billing model</li> <li>Efficient scaling - Automatic resource management</li> <li>Storage lifecycle - Automated data retention policies</li> <li>Resource optimization - Right-sized instances</li> </ul>"},{"location":"infrastructure/#devops-friendly","title":"DevOps-Friendly","text":"<ul> <li>Infrastructure as Code - Version-controlled Terraform</li> <li>GitOps - Declarative application management</li> <li>CI/CD Ready - Integration with GitHub Actions</li> <li>Modular Design - Reusable Terraform modules</li> </ul>"},{"location":"infrastructure/#module-structure","title":"\ud83d\udd27 Module Structure","text":"<p>Our Terraform modules are organized for reusability and maintainability:</p> <pre><code>src/infra/\n\u251c\u2500\u2500 main.tf              # Root module configuration\n\u251c\u2500\u2500 variables.tf         # Input variables\n\u251c\u2500\u2500 outputs.tf          # Output values\n\u251c\u2500\u2500 terraform.tfvars    # Variable values\n\u2514\u2500\u2500 modules/\n    \u251c\u2500\u2500 vpc/            # Networking infrastructure\n    \u251c\u2500\u2500 gke/            # Kubernetes cluster\n    \u251c\u2500\u2500 mysql/          # Database setup\n    \u251c\u2500\u2500 security/       # IAM and encryption\n    \u2514\u2500\u2500 storage/        # Storage and registry\n</code></pre>"},{"location":"infrastructure/#network-architecture","title":"\ud83c\udf10 Network Architecture","text":""},{"location":"infrastructure/#vpc-configuration","title":"VPC Configuration","text":"<ul> <li>Custom VPC with RFC 1918 IP ranges</li> <li>Public subnet for load balancers</li> <li>Private subnet for GKE nodes</li> <li>Secondary ranges for pods and services</li> </ul>"},{"location":"infrastructure/#security-features","title":"Security Features","text":"<ul> <li>Private GKE nodes - No external IPs</li> <li>Cloud NAT - Controlled outbound access</li> <li>Firewall rules - Minimal required ports</li> <li>Service networking - Private database access</li> </ul>"},{"location":"infrastructure/#monitoring-observability","title":"\ud83d\udd0d Monitoring &amp; Observability","text":""},{"location":"infrastructure/#built-in-monitoring","title":"Built-in Monitoring","text":"<ul> <li>Google Cloud Monitoring - Infrastructure metrics</li> <li>Google Cloud Logging - Centralized log management</li> <li>Health checks - Service availability monitoring</li> <li>Alerting - Automated incident response</li> </ul>"},{"location":"infrastructure/#custom-metrics","title":"Custom Metrics","text":"<ul> <li>Application metrics via Prometheus</li> <li>Business metrics via MLflow tracking</li> <li>Performance metrics via ZenML dashboard</li> <li>Cost metrics via Cloud Billing API</li> </ul>"},{"location":"infrastructure/#detailed-infrastructure-components","title":"\ud83d\udccb Detailed Infrastructure Components","text":""},{"location":"infrastructure/#gke-autopilot-cluster","title":"GKE Autopilot Cluster","text":"<ul> <li>Fully managed Kubernetes service with automatic node management</li> <li>Built-in security with hardened nodes and automatic updates</li> <li>Cost optimization - pay only for CPU, memory, and storage used by pods</li> <li>Workload Identity enabled for secure GCP service authentication</li> <li>Auto-scaling based on resource requests and cluster demand</li> </ul>"},{"location":"infrastructure/#cloud-sql-mysql-database","title":"Cloud SQL MySQL Database","text":"<ul> <li>Private IP only - accessible only within the VPC network</li> <li>Automated backups with point-in-time recovery (7-day retention)</li> <li>SSL enforcement with ENCRYPTED_ONLY mode for secure connections</li> <li>Secret Manager integration for secure credential storage</li> <li>Default sizing - db-n1-standard-2 (2 vCPUs, 7.5GB RAM, 20GB SSD)</li> </ul>"},{"location":"infrastructure/#vpc-networking","title":"VPC Networking","text":"<ul> <li>Custom VPC with RFC 1918 IP address ranges</li> <li>Private subnets for GKE nodes with no external IPs</li> <li>Secondary IP ranges for pods (10.1.0.0/16) and services (10.2.0.0/16)</li> <li>Cloud NAT for controlled outbound internet access</li> <li>Private Service Access for secure database connectivity</li> </ul>"},{"location":"infrastructure/#security-iam","title":"Security &amp; IAM","text":"<ul> <li>Service accounts with least-privilege access principles</li> <li>Workload Identity binding between Kubernetes and GCP service accounts  </li> <li>KMS encryption for application-layer secrets</li> <li>Secret Manager for secure credential storage and rotation</li> <li>Firewall rules with minimal required ports and sources</li> </ul>"},{"location":"infrastructure/#customization","title":"\ud83d\udee0\ufe0f Customization","text":""},{"location":"infrastructure/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<pre><code># Development\nproject_name = \"zenml-dev\"\nenvironment  = \"dev\"\nnode_pools = {\n  general = {\n    node_count   = 1\n    machine_type = \"e2-small\"\n  }\n}\n\n# Production\nproject_name = \"zenml-prod\"\nenvironment  = \"prod\"\nnode_pools = {\n  general = {\n    node_count   = 3\n    machine_type = \"e2-standard-4\"\n  }\n}\n</code></pre>"},{"location":"infrastructure/#multi-region-deployment","title":"Multi-Region Deployment","text":"<pre><code># Primary region\nregion = \"us-central1\"\nzones  = [\"us-central1-a\", \"us-central1-b\", \"us-central1-c\"]\n\n# Backup region (for disaster recovery)\nbackup_region = \"us-east1\"\n</code></pre>"},{"location":"infrastructure/#disaster-recovery","title":"\ud83d\udea8 Disaster Recovery","text":""},{"location":"infrastructure/#backup-strategy","title":"Backup Strategy","text":"<ul> <li>Database backups - Automated daily backups</li> <li>Configuration backups - Git repository</li> <li>State backups - Terraform state versioning</li> <li>Application backups - ArgoCD sync records</li> </ul>"},{"location":"infrastructure/#recovery-procedures","title":"Recovery Procedures","text":"<ul> <li>Point-in-time recovery - Database restoration</li> <li>Infrastructure recreation - Terraform apply</li> <li>Application redeployment - ArgoCD sync</li> <li>Data restoration - Storage bucket recovery</li> </ul> <p>Getting Started</p> <p>New to infrastructure? Start with our Quick Start Guide for a simple deployment.</p> <p>Production Features</p> <p>The Quick Start Guide includes production-ready configurations including custom domains, HTTPS, and security settings.</p>"},{"location":"operations/","title":"Operations","text":"<p>This section covers the operational aspects of managing your ZenML MLOps stack in production, including monitoring, scaling, backup, and maintenance procedures.</p>"},{"location":"operations/#operations-overview","title":"\ud83d\udd27 Operations Overview","text":""},{"location":"operations/#key-operational-areas","title":"Key Operational Areas","text":"<ul> <li>Monitoring - Health checks, metrics, and alerting</li> <li>Backup and recovery - Data protection and disaster recovery</li> <li>Scaling - Resource management and auto-scaling</li> </ul>"},{"location":"operations/#maintenance-tasks","title":"Maintenance Tasks","text":"<ul> <li>Updates - Application and infrastructure updates</li> <li>Security - Vulnerability management and patches</li> <li>Performance - Resource optimization and tuning</li> </ul>"},{"location":"operations/#operational-dashboard","title":"\ud83d\udcca Operational Dashboard","text":""},{"location":"operations/#key-metrics-to-monitor","title":"Key Metrics to Monitor","text":"Metric Category Key Indicators Tools Infrastructure CPU, Memory, Disk, Network Google Cloud Monitoring Applications Response time, Error rate, Throughput Application logs, Prometheus Database Connections, Query performance, Storage Cloud SQL Insights Certificates Expiration dates, Renewal status cert-manager metrics Storage Usage, Performance, Costs Cloud Storage metrics"},{"location":"operations/#operational-workflows","title":"\ud83c\udfaf Operational Workflows","text":""},{"location":"operations/#daily-operations","title":"Daily Operations","text":"<pre><code># Health check routine\nkubectl get nodes\nkubectl get pods --all-namespaces\nkubectl get applications -n argocd\n\n# Check ingress and certificates\nkubectl get ingress,certificates --all-namespaces\n\n# Monitor resource usage\nkubectl top nodes\nkubectl top pods --all-namespaces\n</code></pre>"},{"location":"operations/#weekly-operations","title":"Weekly Operations","text":"<pre><code># Review application logs\nkubectl logs -n zenml deployment/zenml-server --tail=100\n\n# Check database performance\ngcloud sql operations list --instance=zenml-mysql\n\n# Review security and updates\nkubectl get pods --all-namespaces -o wide\n</code></pre>"},{"location":"operations/#monthly-operations","title":"Monthly Operations","text":"<pre><code># Review costs and usage\ngcloud billing budgets list\n\n# Update applications and security patches\n# (via GitOps commits and ArgoCD sync)\n\n# Test backup and recovery procedures\n# (validate backup integrity and restoration)\n</code></pre>"},{"location":"operations/#monitoring-strategy","title":"\ud83d\udd0d Monitoring Strategy","text":""},{"location":"operations/#infrastructure-monitoring","title":"Infrastructure Monitoring","text":"<ul> <li>Google Cloud Monitoring for infrastructure metrics</li> <li>GKE monitoring for cluster health</li> <li>Uptime checks for service availability</li> <li>Custom dashboards for operational overview</li> </ul>"},{"location":"operations/#application-monitoring","title":"Application Monitoring","text":"<ul> <li>Health endpoints for application status</li> <li>Performance metrics via application instrumentation</li> <li>Log aggregation via Google Cloud Logging</li> <li>Error tracking and alerting</li> </ul>"},{"location":"operations/#business-metrics","title":"Business Metrics","text":"<ul> <li>ML pipeline executions via ZenML</li> <li>Experiment tracking via MLflow</li> <li>Model performance and drift monitoring</li> <li>User activity and system usage</li> </ul>"},{"location":"operations/#scaling-operations","title":"\u2696\ufe0f Scaling Operations","text":""},{"location":"operations/#auto-scaling-features","title":"Auto-Scaling Features","text":"<ul> <li>GKE Autopilot automatic node management</li> <li>Horizontal Pod Autoscaler for applications</li> <li>Vertical Pod Autoscaler for resource optimization</li> <li>Cloud SQL automatic storage scaling</li> </ul>"},{"location":"operations/#manual-scaling","title":"Manual Scaling","text":"<pre><code># Scale application replicas\nkubectl scale deployment zenml-server -n zenml --replicas=3\n\n# Update resource requests/limits\nkubectl patch deployment zenml-server -n zenml -p \\\n'{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"zenml-server\",\"resources\":{\"requests\":{\"cpu\":\"1000m\",\"memory\":\"2Gi\"}}}]}}}}'\n</code></pre>"},{"location":"operations/#backup-recovery","title":"\ud83d\udd04 Backup &amp; Recovery","text":""},{"location":"operations/#automated-backups","title":"Automated Backups","text":"<ul> <li>Database backups via Cloud SQL automated backups</li> <li>Configuration backups via Git version control</li> <li>State backups via Terraform state versioning</li> <li>Application data via regular exports</li> </ul>"},{"location":"operations/#recovery-procedures","title":"Recovery Procedures","text":"<ul> <li>Point-in-time recovery for database issues</li> <li>Infrastructure recreation via Terraform</li> <li>Application redeployment via ArgoCD</li> <li>Data restoration from backup storage</li> </ul>"},{"location":"operations/#maintenance-operations","title":"\ud83d\udee0\ufe0f Maintenance Operations","text":""},{"location":"operations/#application-updates","title":"Application Updates","text":"<pre><code># Update ZenML version\nhelm upgrade zenml-server oci://public.ecr.aws/zenml/zenml \\\n  --version 0.85.0 \\\n  -f custom-values.yaml \\\n  -n zenml\n\n# Update ArgoCD\nkubectl apply -n argocd -f \\\nhttps://raw.githubusercontent.com/argoproj/argo-cd/v2.9.0/manifests/install.yaml\n</code></pre>"},{"location":"operations/#infrastructure-updates","title":"Infrastructure Updates","text":"<pre><code># Update Terraform modules\ncd src/infra\nterraform init -upgrade\nterraform plan\nterraform apply\n\n# Update GKE cluster version\ngcloud container clusters upgrade zenml-cluster \\\n  --region us-central1 \\\n  --cluster-version 1.28.0\n</code></pre>"},{"location":"operations/#incident-response","title":"\ud83d\udea8 Incident Response","text":""},{"location":"operations/#alert-categories","title":"Alert Categories","text":"<ul> <li>Critical - Service unavailable, data loss risk</li> <li>Warning - Performance degradation, approaching limits  </li> <li>Info - Planned maintenance, configuration changes</li> </ul>"},{"location":"operations/#response-procedures","title":"Response Procedures","text":"<ol> <li>Assess impact - Determine scope and severity</li> <li>Immediate response - Implement workarounds if possible</li> <li>Root cause analysis - Identify underlying issues</li> <li>Resolution - Apply permanent fixes</li> <li>Post-incident review - Document lessons learned</li> </ol>"},{"location":"operations/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<pre><code># Pod stuck in pending\nkubectl describe pod &lt;pod-name&gt; -n &lt;namespace&gt;\nkubectl get events -n &lt;namespace&gt;\n\n# Certificate not renewing\nkubectl describe certificate &lt;cert-name&gt; -n &lt;namespace&gt;\nkubectl logs -n cert-manager deployment/cert-manager\n\n# Database connection issues\nkubectl logs -n zenml deployment/zenml-server\ngcloud sql operations list --instance=zenml-mysql\n</code></pre>"},{"location":"operations/#performance-optimization","title":"\ud83d\udcc8 Performance Optimization","text":""},{"location":"operations/#resource-right-sizing","title":"Resource Right-Sizing","text":"<ul> <li>Monitor actual resource usage vs. requests/limits</li> <li>Adjust based on workload patterns</li> <li>Use Vertical Pod Autoscaler recommendations</li> <li>Regular review of cost vs. performance</li> </ul>"},{"location":"operations/#database-optimization","title":"Database Optimization","text":"<ul> <li>Monitor slow queries and optimize</li> <li>Review connection pooling settings</li> <li>Scale read replicas for read-heavy workloads</li> <li>Implement caching where appropriate</li> </ul>"},{"location":"operations/#storage-optimization","title":"Storage Optimization","text":"<ul> <li>Implement lifecycle policies for old data</li> <li>Use appropriate storage classes</li> <li>Monitor and clean up unused volumes</li> <li>Compress and archive historical data</li> </ul>"},{"location":"operations/#operational-checklists","title":"\ud83d\udccb Operational Checklists","text":""},{"location":"operations/#pre-deployment-checklist","title":"Pre-Deployment Checklist","text":"<ul> <li>[ ] Infrastructure validated with <code>terraform plan</code></li> <li>[ ] Backup procedures tested and verified</li> <li>[ ] Monitoring and alerting configured</li> <li>[ ] Security scanning completed</li> <li>[ ] Performance baselines established</li> </ul>"},{"location":"operations/#post-deployment-checklist","title":"Post-Deployment Checklist","text":"<ul> <li>[ ] All services healthy and accessible</li> <li>[ ] Certificates issued and valid</li> <li>[ ] Monitoring data flowing correctly</li> <li>[ ] Backup jobs running successfully</li> <li>[ ] Documentation updated</li> </ul>"},{"location":"operations/#monthly-review-checklist","title":"Monthly Review Checklist","text":"<ul> <li>[ ] Review cost and usage reports</li> <li>[ ] Check security updates and patches</li> <li>[ ] Test backup and recovery procedures</li> <li>[ ] Review and optimize resource allocation</li> <li>[ ] Update operational documentation</li> </ul> <p>Operational Excellence</p> <p>Successful operations require proactive monitoring, regular maintenance, and well-defined procedures for both routine and emergency situations.</p> <p>Automation First</p> <p>Automate repetitive operational tasks where possible to reduce human error and improve efficiency.</p>"},{"location":"reference/","title":"Reference","text":"<p>This section provides comprehensive reference materials for the ZenML MLOps stack, including command references, architecture details, and optimization guides.</p>"},{"location":"reference/#reference-materials","title":"\ud83d\udcda Reference Materials","text":""},{"location":"reference/#quick-reference","title":"Quick Reference","text":"<ul> <li>Commands - Essential commands and troubleshooting (see sections below)</li> <li>Architecture - Detailed system architecture and design (see sections below)</li> <li>Cost Optimization - Cost management and optimization strategies (see sections below)</li> </ul>"},{"location":"reference/#technical-specifications","title":"Technical Specifications","text":"<ul> <li>Resource Requirements - Minimum and recommended specifications</li> <li>API References - ZenML and MLflow API documentation</li> <li>Configuration Schema - Complete configuration options</li> </ul>"},{"location":"reference/#system-architecture","title":"\ud83c\udfd7\ufe0f System Architecture","text":""},{"location":"reference/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    subgraph \"User Layer\"\n        A[Data Scientists]\n        B[ML Engineers]\n        C[DevOps Teams]\n        D[CI/CD Pipelines]\n    end\n\n    subgraph \"Application Layer\"\n        E[ZenML Server]\n        F[MLflow Server]\n        G[ArgoCD]\n    end\n\n    subgraph \"Platform Layer\"\n        H[GKE Autopilot]\n        I[NGINX Ingress]\n        J[cert-manager]\n        K[External Secrets]\n    end\n\n    subgraph \"Data Layer\"\n        L[Cloud SQL MySQL]\n        M[Cloud Storage]\n        N[Artifact Registry]\n    end\n\n    subgraph \"Infrastructure Layer\"\n        O[VPC Network]\n        P[Cloud Load Balancer]\n        Q[Cloud DNS]\n        R[Secret Manager]\n    end\n\n    A --&gt; E\n    B --&gt; F\n    C --&gt; G\n    D --&gt; E\n    D --&gt; F\n\n    E --&gt; H\n    F --&gt; H\n    G --&gt; H\n\n    H --&gt; I\n    H --&gt; J\n    H --&gt; K\n\n    E --&gt; L\n    F --&gt; L\n    E --&gt; M\n    F --&gt; M\n\n    I --&gt; P\n    P --&gt; O\n    J --&gt; R\n    K --&gt; R</code></pre>"},{"location":"reference/#component-specifications","title":"Component Specifications","text":"Component Version Purpose Resource Requirements GKE Autopilot Latest Kubernetes platform Auto-managed ZenML Server 0.84+ ML orchestration 500m CPU, 1Gi RAM MLflow Server 2.22+ Experiment tracking 200m CPU, 512Mi RAM ArgoCD 2.9+ GitOps platform 250m CPU, 512Mi RAM NGINX Ingress 1.9+ Traffic routing 100m CPU, 128Mi RAM cert-manager 1.13+ Certificate management 50m CPU, 128Mi RAM"},{"location":"reference/#cost-structure","title":"\ud83d\udcb0 Cost Structure","text":""},{"location":"reference/#monthly-cost-breakdown","title":"Monthly Cost Breakdown","text":"Service Category Components Estimated Cost Compute GKE Autopilot, Load Balancer $92+ Database Cloud SQL MySQL $100+ Storage Cloud Storage, Artifact Registry $10+ Networking Egress, DNS $5+ Total All components ~$207+"},{"location":"reference/#cost-variables","title":"Cost Variables","text":"<ul> <li>Usage patterns - Active development vs. production</li> <li>Data volume - Artifacts, models, and logs</li> <li>Geographic region - Pricing varies by region</li> <li>Resource utilization - Actual vs. provisioned resources</li> </ul>"},{"location":"reference/#configuration-reference","title":"\ud83d\udd27 Configuration Reference","text":""},{"location":"reference/#terraform-variables","title":"Terraform Variables","text":""},{"location":"reference/#required-variables","title":"Required Variables","text":"<pre><code>variable \"project_id\" {\n  description = \"Google Cloud Project ID\"\n  type        = string\n}\n\nvariable \"project_name\" {\n  description = \"Project name for resource naming\"\n  type        = string\n}\n\nvariable \"region\" {\n  description = \"Google Cloud region\"\n  type        = string\n  default     = \"us-central1\"\n}\n</code></pre>"},{"location":"reference/#optional-variables","title":"Optional Variables","text":"<pre><code>variable \"domain_name\" {\n  description = \"Custom domain name for services\"\n  type        = string\n  default     = null\n}\n\nvariable \"enable_backup\" {\n  description = \"Enable automated backups\"\n  type        = bool\n  default     = true\n}\n\nvariable \"environment\" {\n  description = \"Environment name (dev, staging, prod)\"\n  type        = string\n  default     = \"dev\"\n}\n</code></pre>"},{"location":"reference/#helm-chart-values","title":"Helm Chart Values","text":""},{"location":"reference/#zenml-configuration","title":"ZenML Configuration","text":"<pre><code># Resource allocation\nresources:\n  requests:\n    cpu: 500m\n    memory: 1Gi\n  limits:\n    cpu: 2000m\n    memory: 4Gi\n\n# Scaling configuration\nautoscaling:\n  enabled: true\n  minReplicas: 1\n  maxReplicas: 5\n  targetCPUUtilizationPercentage: 70\n\n# Security configuration\nserviceAccount:\n  annotations:\n    iam.gke.io/gcp-service-account: zenml@project.iam.gserviceaccount.com\n\n# Database configuration\nzenml:\n  database:\n    url: mysql://zenml@10.x.x.x:3306/zenml\n    sslMode: PREFERRED\n</code></pre>"},{"location":"reference/#mlflow-configuration","title":"MLflow Configuration","text":"<pre><code># Image configuration\nimage:\n  repository: public.ecr.aws/zenml/mlflow-server\n  tag: \"2.22.2\"\n\n# Storage configuration\nartifactRoot:\n  gcs:\n    enabled: true\n    bucket: \"project-mlflow-artifacts\"\n\n# Database configuration\nmysql:\n  enabled: true\n  host: \"10.x.x.x\"\n  port: 3306\n  database: \"mlflow\"\n</code></pre>"},{"location":"reference/#network-configuration","title":"\ud83c\udf10 Network Configuration","text":""},{"location":"reference/#ip-address-ranges","title":"IP Address Ranges","text":"<pre><code># VPC CIDR blocks\nvpc_cidr = \"10.0.0.0/16\"\n\n# Subnet configurations\nsubnet_cidrs = {\n  primary   = \"10.0.1.0/24\"    # Node subnet\n  secondary = \"10.0.2.0/24\"    # Reserved\n  pods      = \"10.1.0.0/16\"    # Pod IP range\n  services  = \"10.2.0.0/16\"    # Service IP range\n}\n\n# Master network (private)\nmaster_ipv4_cidr_block = \"172.16.0.0/28\"\n</code></pre>"},{"location":"reference/#firewall-rules","title":"Firewall Rules","text":"Rule Name Direction Ports Source Purpose <code>allow-ingress-80-443</code> Ingress 80,443 0.0.0.0/0 HTTP/HTTPS traffic <code>allow-gke-nodes</code> Ingress All Node subnet Inter-node communication <code>allow-mysql</code> Ingress 3306 Pod subnet Database access"},{"location":"reference/#performance-benchmarks","title":"\ud83d\udcca Performance Benchmarks","text":""},{"location":"reference/#expected-performance","title":"Expected Performance","text":"Metric Development Production ZenML API Response &lt; 500ms &lt; 200ms MLflow UI Load &lt; 2s &lt; 1s Pipeline Execution Variable Variable Database Queries &lt; 100ms &lt; 50ms"},{"location":"reference/#scaling-thresholds","title":"Scaling Thresholds","text":"Component Scale Up Trigger Scale Down Trigger ZenML Server CPU &gt; 70% CPU &lt; 30% for 5m MLflow Server CPU &gt; 80% CPU &lt; 20% for 10m Database Connections &gt; 80% Manual scaling"},{"location":"reference/#security-reference","title":"\ud83d\udd10 Security Reference","text":""},{"location":"reference/#iam-roles-and-permissions","title":"IAM Roles and Permissions","text":""},{"location":"reference/#zenml-service-account","title":"ZenML Service Account","text":"<pre><code>{\n  \"roles\": [\n    \"roles/secretmanager.secretAccessor\",\n    \"roles/cloudsql.client\", \n    \"roles/storage.admin\"\n  ],\n  \"workloadIdentity\": \"zenml/zenml-server\"\n}\n</code></pre>"},{"location":"reference/#mlflow-service-account","title":"MLflow Service Account","text":"<pre><code>{\n  \"roles\": [\n    \"roles/secretmanager.secretAccessor\",\n    \"roles/cloudsql.client\",\n    \"roles/storage.objectAdmin\"\n  ],\n  \"workloadIdentity\": \"mlflow/mlflow\"\n}\n</code></pre>"},{"location":"reference/#security-controls","title":"Security Controls","text":"Control Type Implementation Status Encryption at Rest Cloud KMS + disk encryption \u2705 Enabled Encryption in Transit TLS 1.2+ everywhere \u2705 Enforced Network Isolation Private GKE nodes \u2705 Configured Secret Management External Secrets Operator \u2705 Deployed Access Control Workload Identity + RBAC \u2705 Configured"},{"location":"reference/#troubleshooting-reference","title":"\ud83d\udee0\ufe0f Troubleshooting Reference","text":""},{"location":"reference/#common-error-codes","title":"Common Error Codes","text":"Error Pattern Likely Cause Solution <code>503 Service Unavailable</code> Backend pods not ready Check pod status and logs <code>SSL_ERROR_*</code> Certificate issues Verify cert-manager and DNS <code>Connection refused</code> Service not running Check service and endpoints <code>403 Forbidden</code> RBAC/IAM permissions Review service account permissions"},{"location":"reference/#debug-commands","title":"Debug Commands","text":"<pre><code># Cluster-wide health\nkubectl get nodes\nkubectl get pods --all-namespaces\n\n# Application-specific\nkubectl describe application zenml-server -n argocd\nkubectl logs -n zenml deployment/zenml-server -f\n\n# Network troubleshooting  \nkubectl get ingress,svc,endpoints --all-namespaces\nkubectl describe ingress zenml-server -n zenml\n\n# Certificate troubleshooting\nkubectl get certificates,certificaterequests --all-namespaces\nkubectl describe certificate zenml-tls -n zenml\n</code></pre>"},{"location":"reference/#external-references","title":"\ud83d\udcda External References","text":""},{"location":"reference/#documentation-links","title":"Documentation Links","text":"<ul> <li>ZenML Documentation</li> <li>MLflow Documentation</li> <li>ArgoCD Documentation</li> <li>Google Cloud Documentation</li> <li>Kubernetes Documentation</li> </ul>"},{"location":"reference/#community-resources","title":"Community Resources","text":"<ul> <li>ZenML GitHub</li> <li>MLflow GitHub</li> <li>ArgoCD GitHub</li> <li>ZenML Slack</li> </ul> <p>Keep This Updated</p> <p>This reference section should be updated as the stack evolves and new versions are deployed.</p> <p>Version Compatibility</p> <p>Always check component compatibility when upgrading versions.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Having issues with your ZenML MLOps stack? This section provides comprehensive troubleshooting guides and solutions for common problems.</p>"},{"location":"troubleshooting/#quick-diagnostics","title":"\ud83d\udd0d Quick Diagnostics","text":""},{"location":"troubleshooting/#health-check-commands","title":"Health Check Commands","text":"<pre><code># Check overall cluster status\nkubectl get nodes\nkubectl get pods --all-namespaces\n\n# Check ArgoCD applications\nkubectl get applications -n argocd\n\n# Check ingress and certificates\nkubectl get ingress,certificates --all-namespaces\n\n# Check service endpoints\nkubectl get svc --all-namespaces\n</code></pre>"},{"location":"troubleshooting/#debug-tools","title":"\ud83d\udd27 Debug Tools","text":""},{"location":"troubleshooting/#essential-commands","title":"Essential Commands","text":"<pre><code># Get detailed information about resources\nkubectl describe &lt;resource-type&gt; &lt;resource-name&gt; -n &lt;namespace&gt;\n\n# Check logs\nkubectl logs &lt;pod-name&gt; -n &lt;namespace&gt; -f\n\n# Check events\nkubectl get events -n &lt;namespace&gt; --sort-by=.metadata.creationTimestamp\n\n# Port forward for debugging\nkubectl port-forward svc/&lt;service-name&gt; &lt;local-port&gt;:&lt;service-port&gt; -n &lt;namespace&gt;\n</code></pre>"},{"location":"troubleshooting/#argocd-debugging","title":"ArgoCD Debugging","text":"<pre><code># Check application status\nkubectl describe application &lt;app-name&gt; -n argocd\n\n# View ArgoCD logs\nkubectl logs -n argocd deployment/argocd-application-controller\nkubectl logs -n argocd deployment/argocd-server\n</code></pre>"},{"location":"troubleshooting/#certificate-debugging","title":"Certificate Debugging","text":"<pre><code># Check certificate status\nkubectl get certificates --all-namespaces\nkubectl describe certificate &lt;cert-name&gt; -n &lt;namespace&gt;\n\n# Check cert-manager logs\nkubectl logs -n cert-manager deployment/cert-manager -f\n\n# Check certificate requests and challenges\nkubectl get certificaterequests,challenges --all-namespaces\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"\ud83c\udd98 Getting Help","text":""},{"location":"troubleshooting/#before-asking-for-help","title":"Before Asking for Help","text":"<ol> <li>Check this documentation - Most issues are covered here</li> <li> <p>Gather information:    <pre><code># Basic cluster info\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods --all-namespaces\n\n# Application status\nkubectl get applications -n argocd\nkubectl get ingress --all-namespaces\nkubectl get certificates --all-namespaces\n</code></pre></p> </li> <li> <p>Check logs for error messages</p> </li> <li>Search existing issues on GitHub</li> </ol>"},{"location":"troubleshooting/#getting-support","title":"Getting Support","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>ZenML Community: ZenML Discord</li> <li>ArgoCD Community: ArgoCD Slack</li> </ul>"},{"location":"troubleshooting/#providing-information","title":"Providing Information","text":"<p>When reporting issues, include:</p> <ul> <li>Environment details: GCP region, Kubernetes version, etc.</li> <li>Error messages: Complete error logs</li> <li>Steps to reproduce: What you did before the issue occurred</li> <li>Resource status: Output of diagnostic commands above</li> </ul> <p>Prevention is Better Than Cure</p> <p>Many issues can be prevented by following our deployment guides carefully and ensuring all prerequisites are met.</p> <p>Still Stuck?</p> <p>If you can't find a solution here, don't hesitate to open an issue on GitHub with detailed information about your problem.</p>"}]}